#pragma rtGlobals=2		// Use modern global access method.///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	CORDUROY_DAQ_protgen// 		Please see READ-ME for relevant notes and information/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////___________IN DEVELOPMENT_______________/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_AssociateAnalysis(ctrlName) : ButtonControl///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string ctrlName//////-----------------------//// Outline://// start the analysis gui//// display the relevant segment(s)//// create analysis and save module//// popup used to associate the module with the protocol////-----------------------//	//	String thisDF = GetDataFolder(1)////	string modPath = "root:Analysis:Modules:"+popStr//	SVAR mod_string = $modPath//	//	SetDataFolder root:DAQ:ProtGen:Current//	string/G associatedmod = mod_string//	//	SetDataFolder thisDF//End//---------------------------------------////	IN DEVELOPMENT	    		////--------------------------------------/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_DisplayProtGenPanel(name)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string name	String thisDF = GetDataFolder(1)	// Create necessary folders and load segments for making protocols	NewDataFolder/O root:DAQ	NewDataFolder/O root:DAQ:Protocols	NewDataFolder/O/S root:DAQ:ProtGen		NVAR launches = launches		if(NVAR_Exists(launches))			launches += 1		else			variable/G launches = 1		endif	NewDataFolder/O/S root:DAQ:ProtGen:Segments	// These variables hold the panel settings during generation of a protocol	NewDataFolder/O/S root:DAQ:ProtGen:Out	string/G DA0="None",DA1="None",DA2="None",DA3="None", DIO1="Start", DIO2="None" //, TTL2="None", TTL3="None"	NewDataFolder/O/S root:DAQ:ProtGen:In	variable/G AD0,AD1,AD2,AD3,AD4,AD5,AD6,AD7,AD8		SVAR protname = root:DAQ:ProtGen:Current:protname	protname = name	CORD_MakeProtocolObject(name) // if name is other than none protocol variables are loaded// Launch the panel	DefaultFont/U "Verdana"	DoWindow/F CORD_ProtGenPanel	if(launches==1)		DoWindow/K CORD_ProtGenPanel		CORD_InitializePGvars(1)		CORD_InitializeFunc(1)		CORD_InitializeAnalysis()		CORD_InitializeModules()	else		DoWindow/K CORD_ProtGenPanel		CORD_InitializePGvars(0)		CORD_InitializeFunc(0)	endif		print "launches "+num2str(launches)	// Execute the actual panel launch commands	Execute "CORD_ProtGenPanel()"	Execute "ModifyPanel cbRGB = (20000,20000,20000)"	// Restore initial data folder	SetDataFolder thisDFEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_InitializeFunc(Flag)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	variable Flag // 0 to load from disk, 1 to recreate function list only	string origDF = GetDataFolder(1)	PathInfo FuncPath	if(V_flag==0)		SVAR PathBase = root:DAQ:General:PathBase		string LocalPath = PathBase+"Protocols:Functions:"		NewPath FuncPath, LocalPath	endif	if(Flag)		NewDataFolder/O/S root:DAQ:ProtGen:Functions		LoadData /D/L=4 /O/Q/P=FuncPath ":"		string/G Sine="", Cosine="", Saw=""		string/G FUNC_list = StringList("*",";" )		FUNC_list = RemoveFromList("FUNC_list",FUNC_list)	else		SetDataFolder root:DAQ:ProtGen:Functions		string/G FUNC_list = StringList("*",";" )		FUNC_list = RemoveFromList("FUNC_list",FUNC_list)		print "Saving functions...  "+FUNC_list		SaveData /D=1/O/Q/L=4/P=FuncPath ":"	endif	FUNC_List += "Define..."			SetDataFolder origDFEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_InitializePGvars(Flag)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	variable Flag	SetDataFolder root:DAQ:ProtGen:Current:// Initialize the segment variables to zero	variable/G STEP_on=0, STEP_off=0, STEP_amp=0, STEP_factor=0, FUNC_freq=0, FUNC_p1=0, FUNC_p2=0, SIMS_tau1=0.5, SIMS_tau2=5, SIMS_amp, SIMS_p1=0, SIMS_p2=0, TTL_w=0.1, TTL_h=5, TTL_p1=0, TTL_p2=0,SQUARE_w=0.2, SQUARE_h=2000, SQUARE_p1=0, SQUARE_p2=0,BURST_w=0.2, BURST_h=2000, BURST_p1=100, BURST_p2=100,BURST_p3=100,ARB_tau1=0, ARB_tau2=0, ARB_p1=0, ARB_p2=0	string/G tmp1 = "Under development", FUNC_type_gstr="Sine", TTL_type_gstr="Linear", TTL_dynamic_gstr="No", SQUARE_type_gstr="Linear", SQUARE_dynamic_gstr="No",SIMS_type_gstr="Linear", SIMS_dynamic_gstr="No", ARB_filter_gstr, NRN_input_gstr, NRN_output_gstr, NRN_apple_gstr// Create the necessary folders	NewDataFolder/O/S root:DAQ:ProtGen:Segments		NewDataFolder/O root:DAQ:ProtGen:Segments:DA	NewDataFolder/O root:DAQ:ProtGen:Segments:TTL		if(Flag)		CORD_LoadSegsFromDisk()		CORD_ListDataFolders("root:DAQ:ProtGen:Segments:DA:","root:DAQ:ProtGen:Segments:SegList_DA")		CORD_ListDataFolders("root:DAQ:ProtGen:Segments:TTL:","root:DAQ:ProtGen:Segments:SegList_TTL")				SetDataFolder  root:DAQ:ProtGen:Current:		else			CORD_ListDataFolders("root:DAQ:ProtGen:Segments:DA:","root:DAQ:ProtGen:Segments:SegList_DA")		CORD_ListDataFolders("root:DAQ:ProtGen:Segments:TTL:","root:DAQ:ProtGen:Segments:SegList_TTL")				SetDataFolder  root:DAQ:ProtGen:Current:		endif	ControlUpdate/A /W=ProtGenPanel	End///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_ListDataFolders(directory,targetfile)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// NOTE OF CAUTION: the directory string must end in a colon otherwise it loops indefinitely	string directory	string targetfile	string oldDF=GetDataFolder(1)		variable AllFolders = CountObjects(directory,4)	if(numtype(AllFolders)!=0)		Abort "The function CORD_ListDataFolders() has aborted because of bad directory syntax"	endif	string tmp1 = ""	string/G $targetfile = ""	SVAR TargetStr = $targetfile	TargetStr = "None;"		variable index=0		do		if (index > AllFolders)			break		endif		tmp1= GetIndexedObjName(directory,4,index)				if(strlen(tmp1)>0)			TargetStr = TargetStr+tmp1+";"		endif				index+=1	while(1)	SetDataFolder oldDFEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_PgChanSet(name,value)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string name	variable value		string ParseName = StringFromList(2,name,"_")	string GlobalRef = "root:DAQ:ProtGen:In:"+ParseName	NVAR updateGvar = $GlobalRef	updateGvar = value		print GlobalRef+" = "+num2str(updateGvar)	End///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_PgProtType(cntrlName,popNum,popStr) : PopupMenuControl///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	String cntrlName	Variable popNum	// which item is currently selected (1-based)	String popStr		// contents of current popup item as string	print "Protcol type: "+popStr	CORD_SetupProtGen(popStr)End///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_SetupProtGen(popStr)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string popStr	SVAR ProtType = root:DAQ:ProtGen:Current:ProtType	strswitch(popStr)		case "Step" :			CORD_ProtGenSwitch("STEP")			ProtType = "STEP"			break		case "Function" :					CORD_ProtGenSwitch("FUNC")			ProtType = "FUNC"			break		case "SimSyn" :					CORD_ProtGenSwitch("SIMS")			ProtType = "SIMS"			break		case "TTL" :			CORD_ProtGenSwitch("TTL")			ProtType = "TTL"			break		case "Square" :			CORD_ProtGenSwitch("SQUARE")			ProtType = "SQUARE"			break		case "Burst" :			CORD_ProtGenSwitch("BURST")			ProtType = "BURST"			break		case "LoadArb" :			CORD_ProtGenSwitch("ARB")			ProtType = "ARB"			break		case "nrnLink" :			CORD_ProtGenSwitch("NRN")			ProtType = "NRN"			break	endswitchEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_MakeProtocolObject(name)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string name	if(DataFolderExists("root:DAQ:ProtGen:Current"))		KillDataFolder root:DAQ:ProtGen:Current	endif	NewDataFolder/O/S root:DAQ:ProtGen:Current	String/G protname = name, ProtType="STEP"			if(stringmatch(name,"temp") || stringmatch(name,"None"))		variable/G numsweep=1,interlude=5,sweeplength=500,flag=0,numChanIn=1,numChanOut=1,dynamic=0,samplerate=30		string/G protstate="IC",associatedmod="None"	else		string NVAR_ref = "root:DAQ:Protocols:"+name+"_nvar"		string SVAR_ref = "root:DAQ:Protocols:"+name+"_svar"		string SegWave_ref = "root:DAQ:Protocols:SegWave"		WAVE NVAR_wave = $NVAR_ref		WAVE/T SVAR_wave = $SVAR_ref		WAVE/T SegWave = $SegWave_ref				variable/G numsweep= NVAR_wave[0]		variable/G interlude= NVAR_wave[1]		variable/G sweeplength= NVAR_wave[2]		variable/G samplerate= NVAR_wave[3]				variable index		string match				for(index=0;index<6;index+=1)					NVAR currentAD = $("root:DAQ:ProtGen:In:AD"+num2str(index))			match = "*"+num2str(index)+"*"						if(stringmatch(SVAR_wave[1], match))				currentAD = 1			endif			if(stringmatch(SVAR_wave[1], "*T*") && index==4)				currentAD = 1			endif						if(stringmatch(SVAR_wave[1], "*D*") && index==5)				currentAD = 1			endif						PopupMenu $("PG_SEG_DA"+num2str(index)), popValue = SegWave[index]		endfor	endifEnd////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// FUNCTIONS REQUIRED FOR PANEL ACTIONS //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_SetOutSeg(cntrlName,popNum,popStr) : PopupMenuControl///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	String cntrlName	Variable popNum	// which item is currently selected (1-based)	String popStr		// contents of current popup item as string	string restoreDF = GetDataFolder(1),parameters="",sprintformat=""	string targetName = "root:DAQ:ProtGen:Out:"+StringFromList(2, cntrlName,"_")	SVAR OutStr = $targetName		OutStr = popStr	// It is useful to display the relevant parameters in the History for easier protocol generation	string SegDir = ""		if(!stringmatch(popStr, "None") )		if(stringmatch(cntrlName, "*DA*"))			SegDir = "root:DAQ:ProtGen:Segments:DA:"+popStr			SetDataFolder $SegDir			WAVE VarWave = VarWave			sprintformat = "Segment variables for "+popStr+"\r Time on: %d\r Time off: %d\r Amplitude: %d\r Factor: %d  "			sprintf parameters, sprintformat,VarWave[3],VarWave[2], VarWave[0], VarWave[1]			print parameters		elseif(stringmatch(cntrlName, "*TTL*"))			SegDir = "root:DAQ:ProtGen:Segments:TTL:"+popStr			SetDataFolder $SegDir			WAVE VarWave = VarWave			sprintformat = "Segment variables for "+popStr+"\r Time on: %d\r Time off: %d\r Amplitude: %d\r Factor: %d  "			sprintf parameters, sprintformat,VarWave[3],VarWave[2], VarWave[0], VarWave[1]			print parameters		else			Abort "Some error has occurred with the panel. Please relaunch the panel."		endif	endif				SetDataFolder restoreDFEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_SetProtState(cntrlName,popNum,popStr) : PopupMenuControl///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	String cntrlName	Variable popNum	// which item is currently selected (1-based)	String popStr		// contents of current popup item as string	String thisDF = GetDataFolder(1)		SetDataFolder root:DAQ:ProtGen:Current	string/G protstate = popStr		SetDataFolder thisDFEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_PgSaveSegment(ctrlName) : ButtonControl///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string ctrlName	// Reference the value created by the panel to get the segment type	SVAR seg_type = root:DAQ:ProtGen:Current:ProtType	// Use a dialog to get the name of the segment	CORD_LaunchGeneralStringDialog("Enter segment name","Use a short name with no spaces")	SVAR seg_name = root:DAQ:General:GeneralStringDialog_value	// Use an executable to call the library executable for this segment type and create the executable string	string ExStr = "CORD_PG_"+seg_type+"_execute(\""+seg_name+"\",0,0)"		Execute ExStrEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_PgMainButtons(ctrlName) : ButtonControl///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string ctrlName	strswitch(ctrlName)		case "PG_LOAD":			CORD_PgLoadProtocol()			break		case "PG_SAVE":			CORD_SaveNewProtocol()			break		case "PG_MERGE":			CORD_CombineSegments()			break	endswitch	End///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_PgLoadProtocol()///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Calls the PROTOCOL panel load function, but also opens the PG panel and updates the current settings to reflect the current protocol//  allowing the user to modify and save a similar protocol without recreating all of the details.	CORD_LoadProtocol()	SVAR name = root:DAQ:protocols:LastProtLoaded// Now launch an update the ProtGen Panel with current details	CORD_DisplayProtGenPanel(name)	End/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_SaveNewProtocol()///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Save a created protocol:	CORD_LaunchGeneralStringDialog("Enter name for new protocol...","Please avoid using spaces in name string")	SVAR PassedName = root:DAQ:General:GeneralStringDialog_value	print "Saving new protocol as: "+PassedName	//Set a symbolic path to locate protocol directories	PathInfo ProtocolDir	if (V_flag == 0)		SVAR PathBase = root:DAQ:General:PathBase		string NewPathName = PathBase + "Protocols:"		NewPath ProtocolDir, NewPathName	endif// Make sure it is in the correct data folder	SetDataFolder root:DAQ:ProtGen:Current:	String/G ProtocolName = PassedName //+".crd" // add file type modifier?// Reference all of the necessary global variables	SVAR DA0 = root:DAQ:ProtGen:Out:DA0	SVAR DA1 = root:DAQ:ProtGen:Out:DA1	SVAR DA2 = root:DAQ:ProtGen:Out:DA2	SVAR DA3 = root:DAQ:ProtGen:Out:DA3	SVAR TTL0 = root:DAQ:ProtGen:Out:TTL0	SVAR TTL1 = root:DAQ:ProtGen:Out:TTL1//	SVAR TTL2 = root:DAQ:ProtGen:Out:TTL2   Not supported in the IGOR XOP//	SVAR TTL3 = root:DAQ:ProtGen:Out:TTL3	NVAR interlude = root:DAQ:ProtGen:Current:interlude	NVAR sweeplength = root:DAQ:ProtGen:Current:sweeplength	NVAR samplerate = root:DAQ:ProtGen:Current:samplerate		NVAR numsweep = root:DAQ:ProtGen:Current:numsweep	NVAR numChanIn = root:DAQ:ProtGen:Current:numChanIn	NVAR numChanOut = root:DAQ:ProtGen:Current:numChanOut	NVAR flag = root:DAQ:ProtGen:Current:flag	NVAR dynamic = root:DAQ:ProtGen:Current:dynamic	SVAR associatedmod = root:DAQ:ProtGen:Current:associatedmod	SVAR protstate = root:DAQ:ProtGen:Current:protstate	NVAR AD0 = root:DAQ:ProtGen:In:AD0	NVAR AD1 = root:DAQ:ProtGen:In:AD1	NVAR AD2 = root:DAQ:ProtGen:In:AD2	NVAR AD3 = root:DAQ:ProtGen:In:AD3	NVAR AD4 = root:DAQ:ProtGen:In:AD4	NVAR AD5 = root:DAQ:ProtGen:In:AD5	NVAR AD6 = root:DAQ:ProtGen:In:AD6	NVAR AD7 = root:DAQ:ProtGen:In:AD7// Reference settings to create the logic sequences	string/G ADSeq = "", DASeq = "", DAChan=""	Make/O/N=1 TmpAD = {AD0,AD1,AD2,AD3,AD4,AD5}	Make/O/N=1/T SegWave = {DA0,DA1,DA2,DA3,TTL0,TTL1}	print "Segments being used: "+DA0+","+DA1+","+DA2+","+DA3+","+TTL0+","+TTL1	// Create logic sequences from referenced variables assuming same number of channels	variable index=0	for(index=0;index<=7;index+=1)		if(TmpAD[index]==1)			ADSeq+=num2str(index)		endif				if(index<=3  && !stringmatch(SegWave[index],"None"))			DASeq+=num2str(index)			DAChan = AddListItem(num2str(index), DAChan)		endif		//		if(index==4  && !stringmatch(SegWave[index],"None"))//			DASeq+="T"//			DAChan = AddListItem(num2str(index), DAChan)//		endif//		//		if(index==5 && !stringmatch(SegWave[index],"None"))//			DASeq+="D"//			DAChan = AddListItem(num2str(index), DAChan)//		endif	endfor// Update the in and out channel counts based upon these sequences	numChanIn = strlen(ADSeq)	numChanOut = strlen(DASeq)// Pack the variables into a single wave for saving	SetDataFolder root:DAQ:ProtGen:Current:	string nvarwave = PassedName+"_nvar"	Make/N=8 $nvarwave	wave nvarw = $nvarwave 	nvarw[0] = numsweep	nvarw[1] = interlude	nvarw[2] = sweeplength	nvarw[3] = samplerate	nvarw[4] = flag	nvarw[5] = numChanIn	nvarw[6] = numChanOut	nvarw[7] = dynamic// Pack the string variables into a single text wave for saving	string svarwave = PassedName+"_svar"	Make/T/N=5 $svarwave	wave/T svarw = $svarwave	svarw[0] = ProtocolName	svarw[1] = DASeq	svarw[2] = ADSeq		svarw[3] = associatedmod	svarw[4] = protstate	// Generate each of the segments	index=0	variable zeroindex=0,alreadymade=0	string CurrSegDir="", ExStr="", ZeroWave=""//////////////////////////////RATHER THAN INTERLEAVE TRANSFER SEG TO OUT ///////////////////////////////////////////////////////////	Bit of a problem here. The segments now need to be indexed according to the channel to which they are applied now.//	This is used to be done with the InterleaveSegments function, however that is no longer used.//	At least temporary solution is to switch the "alredymade" variable which counts up to just the index of the SegWave//	that should give correct referencing.///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		for(index=0;index<3;index+=1)		if(!stringmatch(SegWave[index],"None"))					if(index<=3)				CurrSegDir = "root:DAQ:ProtGen:Segments:DA:"+SegWave[index]			endif//			//			if(index>3)//				CurrSegDir = "root:DAQ:ProtGen:Segments:TTL:"+SegWave[index]//			endif						SetDataFolder $CurrSegDir			// print index			SVAR GenerateString = GenerateString			//			ExStr = GenerateString+num2str(alreadymade)+")"						ExStr = GenerateString+num2str(index)+")"							Execute ExStr							alreadymade+=1					endif		endfor	variable extra = numChanOut - alreadymade		print "Need to create "+num2str(extra)+" zero waves"//	if(extra>0)//		for(index=0;index<extra;index+=1)//			for(zeroindex=0;zeroindex<numsweep;zeroindex+=1)//				ZeroWave = "seg_"+num2str(zeroindex)+"_"+num2str(alreadymade+index+1)//				Make/O/N=1 $ZeroWave=0//			endfor//		endfor//	endif//////////////////////////////RATHER THAN INTERLEAVE TRANSFER SEG TO OUT /////////////////////////////////////////////////////////// Interleave outputs according to the DAseq//	CORD_InterleaveSegments(numsweep,DASeq,1,protstate,DAChan)/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	CORD_ScaleSegs(numsweep,DASeq,1,protstate,DAChan,samplerate)// Save the new protocol directory in a single file	SaveData/D=1/L=1/P=ProtocolDir/Q/T=$ProtocolName	if(V_Flag!=0)		Abort "Error with saving protocol. Will not allow overwrite (just to be safe). Please manually delete existing protocol to eliminate error."	endif	// Update the name in the editor window	SVAR currname=root:DAQ:ProtGen:Current:protname	currname = ProtocolName	KillStrings/Z ProtocolName//SetDataFolder root:DAQ:ProtGen:Current:	SVAR active = root:DAQ:General:gactiveprot	CORD_DisplayProtGenPanel(active)	End///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_ScaleSegs(numsweep,DASeq,killSegs,protstate,DAChan,samplerate)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	variable numsweep	string DASeq	variable killSegs	string protstate	string DAChan	variable samplerate	// Set up necessary objects	SetDataFolder root:DAQ:ProtGen:Current:	variable j, k, l, totalwaves = strlen(DASeq), ChanIndex	string matchStr="", CurrentWaveName="", OutName=""	string ChannelList = "A;B;C;D"	string gainCall = ""// Scale the output waves	variable protTypeFlag	strswitch(protstate)		case "IC":			protTypeFlag = 3			break		case "VC":			protTypeFlag = 2			break			endswitch// Loop thhrough each individual segment for each sweep	for(j=0;j<numsweep;j+=1)		for(k=0;k<totalwaves;k+=1)						ChanIndex = str2num(DASeq[k])			CurrentWaveName = "seg_"+num2str(j)+"_"+num2str(ChanIndex)			WAVE local = $CurrentWaveName						//gainCall = "root:DAQ:Classes:Amplifiers:Channel_"+StringFromList(totalwaves,ChannelList)+"_gains"			gainCall = "root:DAQ:Classes:Amplifiers:Channel_A_gains"			WAVE gains = $gainCall						if(j==0)				print "Using gains from "+gainCall			endif			local = local * gains[protTypeFlag]			print gains[protTypeFlag]			SetScale/P x,0,1/(samplerate*1000),"s", local // Convert sample rate from kHz to delta x in seconds		endfor			endforEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_CombineSegments()///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	CORD_LaunchGeneralStringDialog("Enter name for merged segment...","Do not use spaces in name string")	SVAR PassedName = root:DAQ:General:GeneralStringDialog_value// Get the list of segments to be merged	SVAR SegList_DA = root:DAQ:ProtGen:Segments:SegList_DA	string prot1,prot2,prot3,prot4,prot5	prompt prot1, "Segment 1 :: ",popup, SegList_DA	prompt prot2, "Segment 2 :: ",popup, SegList_DA	prompt prot3, "Segment 3 :: ",popup, SegList_DA	prompt prot4, "Segment 4 :: ",popup, SegList_DA	prompt prot5, "Segment 5 :: ",popup, SegList_DA	DoPrompt "Select segments to merge", prot1,prot2,prot3,prot4,prot5		if (V_Flag)			Abort		endif		string SegList = prot1+";"+prot2+";"+prot3+";"+prot4+";"+prot5	string currentprot, seg_folder, newVarWave, ExStr	variable index	string NewFolderName = "root:DAQ:ProtGen:Segments:DA:"+PassedName	NewDataFolder/O $NewFolderName	string NewFolderNameSeg = "root:DAQ:ProtGen:Segments:DA:"+PassedName+":SegTypeList"	Make/T/N=5 $NewFolderNameSeg	WAVE/T SegTypeList = $NewFolderNameSeg		for(index=0;index<=4;index+=1)			currentprot = StringFromList(index,SegList)		if(stringmatch(currentprot,"None"))			continue		else			seg_folder = "root:DAQ:ProtGen:Segments:DA:"+currentprot			SetDataFolder $seg_folder			SVAR SegType=SegType			SegTypeList[index] = SegType			newVarWave = "root:DAQ:ProtGen:Segments:DA:"+PassedName+":"+"VarWave_"+num2str(index)			Duplicate VarWave,  $newVarWave		endif					endfor	// set a global merged variable to reflect multiple segments (the save protocol function will then know to combine segments once generated)	SetDataFolder $NewFolderName	newVarWave = "root:DAQ:ProtGen:Segments:DA:"+PassedName+":merged"	variable/G $newVarWave = 1		// Create the merged segment	CORD_SaveSegToDisk(PassedName,1)End///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_SetPGpanel(cntrlName,popNum,popStr) : PopupMenuControl///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	String cntrlName	Variable popNum	// which item is currently selected (1-based)	String popStr		// contents of current popup item as string		if(stringmatch(popStr,"*..."))		CORD_EnterUserFunction(cntrlName)	else		string SVARcall = "root:DAQ:ProtGen:Current:"+cntrlName+"_gstr"		SVAR updateStr = $SVARcall		updateStr = popStr	endifEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_SaveSegToDisk(seg_name,type_flag)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Despite function name this saves as a packed experiment file to conserve space since these waves are potentially large	string seg_name	variable type_flag // 0 for TTL; 1 for DA		PathInfo SegmentPath		if(V_flag==0)		SVAR PathBase = root:DAQ:General:PathBase		string NewPathName = PathBase + "Protocols:Segments:"		NewPath SegmentPath,  NewPathName	endif	string seg_folder = ""		if(type_flag)		seg_folder = "root:DAQ:ProtGen:Segments:DA:"+seg_name	else		seg_folder = "root:DAQ:ProtGen:Segments:TTL:"+seg_name	endif		SetDataFolder $seg_folder 	variable/G type = type_flag// Without /L flag included this will save everything within the data folder to disk	SaveData /D=1/L=7/O/Q/T/P=SegmentPath ":"	// Now update the control panel	CORD_InitializePGvars(0)	ControlUpdate/A/W=CORD_ProtGenPanel	End///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_LoadSegsFromDisk()///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	PathInfo SegmentPath		if(V_flag==0)		SVAR PathBase = root:DAQ:General:PathBase		string NewPathName = PathBase + "Protocols:Segments:"		NewPath SegmentPath,  NewPathName	endif	SetDataFolder root:DAQ:ProtGen:Segments:	String/G JustLoaded=""// Load all the segments segregated according to type	LoadData /D/O=1/P=SegmentPath/Q/R/T	// Get the name of all the new segments that were just loaded	CORD_ListDataFolders("root:DAQ:ProtGen:Segments:Segments","root:DAQ:ProtGen:Segments:JustLoaded")	JustLoaded = RemoveFromList("None", JustLoaded)// Loop through all the segments and move them to the correct folders	SetDataFolder root:DAQ:ProtGen:Segments:Segments:	variable numSegs = ItemsInList(JustLoaded), index=0	string seg_folder = "", seg_name="", seg_folder_curr=""		for(index=0;index<numSegs;index+=1)				seg_name = StringFromList(index, JustLoaded)		seg_folder_curr = "root:DAQ:ProtGen:Segments:Segments:"+seg_name		NVAR type = $(seg_folder_curr+":type")		if(!NVAR_Exists(type))			variable/G type=1 // Assume it is a DA segment		endif				if(type)			seg_folder = "root:DAQ:ProtGen:Segments:DA:"		else			seg_folder = "root:DAQ:ProtGen:Segments:TTL:"		endif		MoveDataFolder $seg_name, $seg_folder	endfor		SetDataFolder root:DAQ:ProtGen:Segments:	// Finally clean up any mess that was created during the loading	KillDataFolder root:DAQ:ProtGen:Segments:Segments	KillStrings /Z JustLoaded	KillVariables/Z type	End///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_EnterUserFunction(cntrlName)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string cntrlName		String thisDF = GetDataFolder(1)	SetDataFolder root:DAQ:General	String/G NewFunction = "X"	String/G NewFuncName = "Enter the name here"	Execute "CORD_EnterUserFunctionPanel()"		strswitch(cntrlName)		case "FUNC_type":			print "New user-defined function entered"			break		case "SIMS_type":			print "New user-defined SIMS distribution entered"			break		case "TTL_type":			print "New user-defined TTL distribution entered"			break		case "ARB_filter":			print "New user-defined ARB filter entered"			break			endswitch		SetDataFolder thisDFEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Window CORD_EnterUserFunctionPanel() : Panel///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	PauseUpdate; Silent 1 // building the window...	DoWindow/K CORD_EnterUserFunctionPanel	NewPanel/W=(400,340,700,440)/K=1 as "Enter new equation..."// Use a string global and a SetVariable to get the data in	string/g root:DAQ:General:tmpvar = "Use exact parameter names with spaces"	TitleBox NewMessage  font="Verdana", frame=0, fsize=11, pos={30,5}, size={200,20}, variable=root:DAQ:General:tmpvar	SetVariable NewFunction bodywidth=220,noproc,pos={220,25},title="Y = ",value=root:DAQ:General:NewFunction	SetVariable NewName bodywidth=220,noproc,pos={220,45},title="Name ",value=root:DAQ:General:NewFuncName// Create a button that closes the window to cotinue execution of procedure with this function embedded	Button NewFuncEditButton, pos={20,70}, size={80,20}, proc=CORD_EnterUserFunctionAction, title="EDIT"	Button NewFuncSaveButton, pos={110,70}, size={80,20}, proc=CORD_EnterUserFunctionAction, title="SAVE"	Button NewFuncCloseButton, pos={200,70}, size={80,20}, proc=CORD_EnterUserFunctionAction, title="CLOSE"End///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_EnterUserFunctionAction(ctrlName) : ButtonControl///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	String ctrlName	strswitch(ctrlName)		case "NewFuncEditButton":					break		case "NewFuncSaveButton":			CORD_GenerateFunctionFromString(StringFromList(0,ctrlName,"_"))			CORD_InitializeFunc(0)			break		case "NewFuncCloseButton":			DoWindow/K CORD_EnterUserFunctionPanel			KillStrings root:DAQ:General:tmpvar			break	endswitchEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_GenerateFunctionFromString(nameType)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string nameType// Temporary development message	Abort "The function CORD_GenerateFunctionFromString has not been fully developed. Please use existing functions until a later version of CorduroyDAQ" // To be used in the developments//	ReplaceString(replaceThisStr, inStr, withThisStr)// Check for errors in the syntax of the function enteredEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_ProtGenSwitch(currItem)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string currItem	string currItemMatchString = "!"+currItem+"*"		string windName = "CORD_ProtGenPanel"	string ControlList =  ControlNameList(windName)	string currControl = ""	variable length = ItemsInList(ControlList)	variable index,enable		for(index=0;index<=(length-1);index+=1)				CurrControl = StringFromList(index, ControlList)				if( stringmatch(CurrControl,"!PG*") )			if( stringmatch(CurrControl,currItemMatchString) )				enable = 0			else				enable = 1				endif		else			enable = 1		endif				ControlInfo /W=$windName $CurrControl							switch(abs(V_Flag))			case 1:				Button $CurrControl, disable=(!enable)				break			case 2:				CheckBox $CurrControl, disable=(!enable)				break			case 3:				PopupMenu $CurrControl, disable=(!enable)				break			case 4:				ValDisplay $CurrControl, disable=(!enable)				break			case 5:				SetVariable $CurrControl, disable=(!enable)				break			case 6:				Chart $CurrControl, disable=(!enable)				break			case 7:				Slider $CurrControl, disable=(!enable)				break			case 8://				TabControl $CurrControl, disable=(!enable)				break			case 9:				GroupBox $CurrControl, disable=(!enable)				break			case 10:				TitleBox $CurrControl, disable=(!enable)				break			case 11:				ListBox $CurrControl, disable=(!enable)				break		endswitch		endfor	End////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// PANEL WINDOW DESCRIPTION ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Window CORD_ProtGenPanel() : Panel///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	PauseUpdate; Silent 1 // building the window...	NewPanel/W=(195,490,630,810)/K=1 as "Protocol Generator"	SetDrawLayer ProgBack	Print "DAQ Protocol Panel launched at  "+time()+" on "+date()GroupBox PG_ProtType,pos={3,15},size={150,300},font="Verdana",title="Segment Generator",font="Verdana",fColor=(60000,20000,40000),fstyle=0,fsize=11,labelBack=(60000,20000,40000)		PopupMenu PG_PT_popup1,bodyWidth=100,font="Verdana",proc=CORD_PgProtType,pos={90,40},title="Type",value="Step;Function;SimSyn;TTL;Square;Burst;LoadArb;nrnLink",fsize=10	Button PG_UpdateButton, pos={12,65},font="Verdana",size={130,15},fsize=10,proc=CORD_PgSaveSegment,title="save segment"SetVariable PG_PT_TITLE,font="Verdana", frame=1, fsize=12, pos={162,17}, size={268,30}, title="Protocol Name:",variable=root:DAQ:ProtGen:Current:protname,fColor=(20000,60000,40000)	GroupBox PG_Spec,pos={160,45},size={270,270},font="Verdana",title="Protocol Details",font="Verdana",fColor=(20000,40000,60000),fstyle=0,fsize=11,labelBack=(20000,40000,60000),fsize=10	variable off = 25		Button PG_LOAD, pos={170,68},font="Verdana",size={100,30},fsize=10,proc=CORD_PgMainButtons,title="Load..."	Button PG_SAVE, pos={170,108},font="Verdana",size={100,30},fsize=10,proc=CORD_PgMainButtons,title="Save As..."	Button PG_MERGE, pos={170,148},font="Verdana",size={100,30},fsize=10,proc=CORD_PgMainButtons,title="Merge Segs"	// Primary channels dedicated to the amplifier//	TitleBox PG_PRIM,font="Verdana", frame=2, fsize=10, pos={170,165+off}, size={260,30}, title="Primary"	GroupBox PG_PRI,pos={167,170+off},size={50,115},font="Verdana",title="Pri",font="Verdana",fsize=10,fColor=(0,0,0)	CheckBox PG_PT_AD0, fsize=10, mode=0,pos={170,190+off},proc=CORD_PgChanSet,title="AD0",value=0,variable=root:DAQ:ProtGen:In:AD0	CheckBox PG_PT_AD1, fsize=10, mode=0,pos={170,215+off},proc=CORD_PgChanSet,title="AD1",value=0,variable=root:DAQ:ProtGen:In:AD1	CheckBox PG_PT_AD2, fsize=10, mode=0,pos={170,240+off},proc=CORD_PgChanSet,title="AD2",value=0,variable=root:DAQ:ProtGen:In:AD2	CheckBox PG_PT_AD3, fsize=10, mode=0,pos={170,265+off},proc=CORD_PgChanSet,title="AD3",value=0,variable=root:DAQ:ProtGen:In:AD3// Secondary channels for peripherals//	TitleBox PG_SEC,font="Verdana", frame=0, fsize=10, pos={235,165+off}, size={260,30}, title="AUX"	GroupBox PG_SEC,pos={228,170+off},size={50,115},font="Verdana",title="Aux",font="Verdana",fsize=10,fColor=(0,0,0)	CheckBox PG_PT_AD4, fsize=10, mode=0,pos={231,190+off},proc=CORD_PgChanSet,title="AD4",value=0,variable=root:DAQ:ProtGen:In:AD4	CheckBox PG_PT_AD5, fsize=10, mode=0,pos={231,215+off},proc=CORD_PgChanSet,title="AD5",value=0,variable=root:DAQ:ProtGen:In:AD5	CheckBox PG_PT_AD6, fsize=10, mode=0,pos={231,240+off},proc=CORD_PgChanSet,title="AD6",value=0,variable=root:DAQ:ProtGen:In:AD6	CheckBox PG_PT_AD7, fsize=10, mode=0,pos={231,265+off},proc=CORD_PgChanSet,title="AD7",value=0,variable=root:DAQ:ProtGen:In:AD7	// Output channels	off = -25	PopupMenu PG_SEG_DA0, bodyWidth=90, fsize=10, proc=CORD_SetOutSeg,pos={372,88+off},title="DA0:",value=root:DAQ:ProtGen:Segments:SegList_DA, mode=1, disable=0	PopupMenu PG_SEG_DA1, bodyWidth=90, fsize=10, proc=CORD_SetOutSeg,pos={372,113+off},title="DA1:",value=root:DAQ:ProtGen:Segments:SegList_DA, mode=1, disable=0	PopupMenu PG_SEG_DA2, bodyWidth=90, fsize=10, proc=CORD_SetOutSeg,pos={372,138+off},title="DA2:",value=root:DAQ:ProtGen:Segments:SegList_DA, mode=1, disable=2	PopupMenu PG_SEG_DA3, bodyWidth=90, fsize=10, proc=CORD_SetOutSeg,pos={372,163+off},title="DA3:",value=root:DAQ:ProtGen:Segments:SegList_DA, mode=1, disable=2	PopupMenu PG_SEG_TTL0, bodyWidth=90, fsize=10, proc=CORD_SetOutSeg,pos={372,188+off},title="TTL0:",value="Start;Off", mode=1, disable=2	PopupMenu PG_SEG_TTL1, bodyWidth=90, fsize=10, proc=CORD_SetOutSeg,pos={372,213+off},title="TTL1:",value="Off;End", mode=1, disable=2					off = -15		SetVariable PG_PT_sweeplength,pos={290,240+off},size={133,20},title="Duration (ms)",font="Verdana",fsize=10,limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:sweeplength	SetVariable PG_PT_numsweep,pos={290,260+off},size={64,20},title="Sweeps",font="Verdana",fsize=10,limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:numsweep	SetVariable PG_PT_interlude,pos={359,260+off},size={64,20},title="ISI (s)",font="Verdana",fsize=10,limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:interlude	SetVariable PG_PT_samplerate,pos={290,280+off},size={133,20},title="Sampling (kHz):",font="Verdana",fsize=10,limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:samplerate	PopupMenu PG_PT_prottype, bodyWidth=63, font="Verdana", fsize=10, proc=CORD_SetProtState,pos={373,302+off},title="Amp State:",value="IC;VC", mode=1		// Associated analysis module pulldown	//Button PG_PT_module1,size={80,30},fsize=10,font="Verdana",proc=CORD_AssociateAnalysis,pos={410,60+off},title="Online Analysis"	// Some shared specific parameters	SetVariable PG_TimeOn,pos={10,85},size={133,20},title="TimeOn (ms):",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:STEP_on	SetVariable PG_TimeOff,pos={10,105},size={133,20},title="TimeOff (ms):",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:STEP_off	SetVariable PG_amp,pos={10,125},size={133,20},title="Amplitude (pA):",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:STEP_amp	SetVariable PG_factor,pos={10,145},size={133,20},title="Increment (pA):",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:STEP_factor, disable=0	// Divider between step section and more detailed section	SetDrawEnv linefgc=(65278,55512,34438), dash=3	DrawLine 10,173,148,173	// Function parameters	PopupMenu FUNC_type, bodyWidth=80, font="Arial", fsize=10, proc=CORD_SetPGpanel,pos={90,202},title="Function:",value=root:DAQ:ProtGen:Functions:FUNC_list, mode=1, disable=1	SetVariable FUNC_freq, pos={10,185},size={133,20},title="Frequency:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:FUNC_freq, disable=1	SetVariable FUNC_p1, pos={10,225},size={133,20},title="P1: ",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:FUNC_p1, disable=1	SetVariable FUNC_p2, pos={10,245},size={133,20},title="P2: ",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:FUNC_p2, disable=1		// SimSyn parameters	SetVariable SIMS_tau1, pos={9,185},size={67,20},title="Tau1:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:SIMS_tau1, disable=1	SetVariable SIMS_tau2, pos={78,185},size={67,20},title="Tau2:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:SIMS_tau2, disable=1	SetVariable SIMS_amp, pos={10,205},size={133,20},title="Amplitude:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:SIMS_amp, disable=1	PopupMenu SIMS_type, bodyWidth=80, font="Arial", fsize=10, proc=CORD_SetPGpanel,pos={95,222},title="Distribution:",value="Linear;Poisson;PoissonR;Gaussian;Gamma", mode=1, disable=1	SetVariable SIMS_freq1, pos={10,245},size={133,20},title="P1:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:SIMS_p1, disable=1	SetVariable SIMS_freq2, pos={10,265},size={133,20},title="P2:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:SIMS_p2, disable=1	PopupMenu SIMS_dynamic, bodyWidth=80, font="Arial", fsize=10, proc=CORD_SetPGpanel,pos={95,282},title="Dynamic?   ",value="No;Yes", mode=1, disable=1	// TTL parameters	SetVariable TTL_width, pos={10,185},size={133,20},title="Width:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:TTL_w, disable=1	SetVariable TTL_height, pos={10,205},size={133,20},title="Height:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:TTL_h, disable=1	PopupMenu TTL_type, bodyWidth=80, font="Arial", fsize=10, proc=CORD_SetPGpanel,pos={95,222},title="Distribution:",value="Linear;Poisson;PoissonR;Gaussian;Gamma", mode=1, disable=1	SetVariable TTL_param1, pos={10,245},size={133,20},title="P1:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:TTL_p1, disable=1	SetVariable TTL_param2, pos={10,265},size={133,20},title="P2:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:TTL_p2, disable=1	PopupMenu TTL_dynamic, bodyWidth=80, font="Arial", fsize=10, proc=CORD_SetPGpanel,pos={95,282},title="Dynamic?   ",value="No;Yes", mode=1, disable=1// SQUARE parameters	SetVariable SQUARE_width, pos={10,185},size={133,20},title="Width:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:SQUARE_w, disable=1	SetVariable SQUARE_height, pos={10,205},size={133,20},title="Height:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:SQUARE_h, disable=1	PopupMenu SQUARE_type, bodyWidth=80, font="Arial", fsize=10, proc=CORD_SetPGpanel,pos={95,222},title="Distribution:",value="Linear;Poisson;PoissonR;Gaussian;Gamma", mode=1, disable=1	SetVariable SQUARE_param1, pos={10,245},size={133,20},title="P1:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:SQUARE_p1, disable=1	SetVariable SQUARE_param2, pos={10,265},size={133,20},title="P2:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:SQUARE_p2, disable=1	PopupMenu SQUARE_dynamic, bodyWidth=80, font="Arial", fsize=10, proc=CORD_SetPGpanel,pos={95,282},title="Dynamic?   ",value="No;Yes", mode=1, disable=1// BURST parameters	SetVariable BURST_width, pos={10,185},size={133,20},title="Width:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:BURST_w, disable=1	SetVariable BURST_height, pos={10,205},size={133,20},title="Height:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:BURST_h, disable=1	SetVariable BURST_param1, pos={10,225},size={133,20},title="Burst Freq:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:BURST_p1, disable=1	SetVariable BURST_param2, pos={10,245},size={133,20},title="Burst Lng:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:BURST_p2, disable=1	SetVariable BURST_param3, pos={10,265},size={133,20},title="Burst Gap:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:BURST_p3, disable=1		// LoadArb parameters	SetVariable ARB_scale, pos={10,185},size={133,20},title="Scale:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:ARB_tau1, disable=1	SetVariable ARB_offset, pos={10,205},size={133,20},title="Offset:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:ARB_tau2, disable=1//	PopupMenu ARB_filter,  bodyWidth=80, font="Arial", fsize=10, proc=CORD_SetPGpanel,pos={95,222},title="Input Filter:",value="None;Brickwall;RC;Smooth", mode=1, popvalue="None",disable=1//	SetVariable ARB_param1, pos={10,245},size={133,20},title="P1:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:ARB_p1, disable=1//	SetVariable ARB_param2, pos={10,265},size={133,20},title="P2:",font="Arial",fsize=10, limits={-Inf,Inf,0},value=root:DAQ:ProtGen:Current:ARB_p2, disable=1	// nrnLink parameters	TitleBox NRN_error,  font="Verdana", frame=0, fsize=12, pos={13,185}, size={133,20}, variable=root:DAQ:ProtGen:Current:tmp1, disable=1	PopupMenu NRN_input,  bodyWidth=80, font="Arial", fsize=10, proc=CORD_SetPGpanel,pos={95,202},title="Input:        ",value="None", mode=1, popvalue="None",disable=1	PopupMenu NRN_output,  bodyWidth=80, font="Arial", fsize=10, proc=CORD_SetPGpanel,pos={95,232},title="Output:     ",value="None", mode=1, popvalue="None",disable=1	PopupMenu NRN_apple,  bodyWidth=80, font="Arial", fsize=10, proc=CORD_SetPGpanel,pos={95,262},title="Applescript:",value="None", mode=1, popvalue="None",disable=1// dynamic clamp parametersEndMacro