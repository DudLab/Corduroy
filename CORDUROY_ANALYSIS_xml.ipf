#pragma rtGlobals=2 	// Use modern global access method.///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	CORDUROY_ANALYSIS_xml//		Contains the code for the electronic lab notebook///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_UpdateELNdata(type)//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////variable typeString thisDF = GetDataFolder(1)	switch(type)		case 0:	// initialize ELN data (CALLED DURING INITIALIZATION)			NewDataFolder/O/S root:ExpDetails					// Default setting for the set variables and strings				variable/G root:ExpDetails:Age = 35			variable/G root:ExpDetails:VirusDSI = 14			variable/G root:ExpDetails:CaBuff = 0.2			variable/G root:ExpDetails:Dye1Conc = 50			variable/G root:ExpDetails:Dye2Conc = 500		//--			string/G root:ExpDetails:MouseID = "000000"			string/G root:ExpDetails:TheTime = time()			string/G root:ExpDetails:TheDate = date()			string/G root:ExpDetails:TheDateCont = CORD_ParseDate(Secs2Date(DateTime,-1))			string/G root:ExpDetails:Geno="WT"			string/G root:ExpDetails:Sex="M"			string/G root:ExpDetails:VirusID = "none"			string/G root:ExpDetails:ProjID="000: Non-ID Project"			string/G root:ExpDetails:BrReg="DL Striatum"			string/G root:ExpDetails:Orient="Coronal"			string/G root:ExpDetails:PipSoln="KGluc"			string/G root:ExpDetails:Dye1="none"			string/G root:ExpDetails:Dye2="none"			string/G root:ExpDetails:SliceNum="A"			string/G root:ExpDetails:CellNum="1"			string/G root:ExpDetails:RecConfig="Whole-cell"			string/G root:ExpDetails:ICVC="I-Clamp"			string/G root:ExpDetails:Xdrug1 = "none"			string/G root:ExpDetails:Xdrug2 = "none"			string/G root:ExpDetails:Xdrug3 = "none"			string/G root:ExpDetails:AmpPreset = "Multiclamp700B"		// Some details of the current protocol			string/G root:ExpDetails:activePlot = "none"			string/G root:ExpDetails:Protocol = "none"			string/G root:ExpDetails:NumTrace = "1"			string/G root:ExpDetails:SampleRate = "30"			string/G root:ExpDetails:ADstr = "0"			string/G root:ExpDetails:DAstr = "0"		// The amplifier/telegraphing data part			Make/O/T/N=(16,10) AmpSettings			AmpSettings[0,][0] = num2str(p+1) // Set the channel numbers				AmpSettings[0,1][1] = "V-Clamp" // Default mode is 0 (IC)			AmpSettings[2,][1] = "PassThru" // Default mode for non-Multiclamps			AmpSettings[0,][2] = num2str(1) // Set the default gain of 1			AmpSettings[0,][3] = "DC" // F low cutoff default			AmpSettings[0,][4] = num2str(6) //  F high cutoff			AmpSettings[0,][5] = "" // Not supported by default			AmpSettings[0,][6] = "" // Not supported by default			AmpSettings[0,][7] = "" // Not supported by default			AmpSettings[0,][8] = "" // Not supported by default			AmpSettings[0,][9] = num2str(0) //No telegraphing by default			Make/O/T/N=9 columnTitles = {"CH","M","G","Fl","Fh","Cp","Rs","Cm","%","TEL"}		// Stuff for the porter functionality			string/G root:ExpDetails:PVstr = "0000"			PathInfo DataBasePath			string/G root:ExpDetails:DataBasePath = S_path			string/G root:ExpDetails:ProposedFile = "none"			string/G root:ExpDetails:UserTagA = "none"			string/G root:ExpDetails:UserTagB = "none"			string/G root:ExpDetails:UserTagC = "none"			string/G root:ExpDetails:UserTagD = "none"			string/G root:ExpDetails:button_names = "EXPORT [--->];IMPORT [<---]"			string/G root:ExpDetails:fileList = IndexedFile(DataBasePath,-1,".h5")						string/G root:ExpDetails:foldList = IndexedDir(DataBasePath,-1,0)						variable/G root:ExpDetails:RangeHi = 1			variable/G root:ExpDetails:RangeLo = 0			variable/G root:ExpDetails:currImExMode = 0			break					case 1: // create the text waves containing all of the various recording data and labels (CALLED BY DAQ)			NVAR Age = root:ExpDetails:Age			NVAR VirusDSI = root:ExpDetails:VirusDSI			NVAR CaBuff = root:ExpDetails:CaBuff			NVAR Dye1Conc = root:ExpDetails:Dye1Conc			NVAR Dye2Conc = root:ExpDetails:Dye2Conc		//--						SVAR MouseID = root:ExpDetails:MouseID			SVAR Geno =root:ExpDetails:Geno			SVAR Sex =root:ExpDetails:Sex			SVAR VirusID =root:ExpDetails:VirusID			SVAR ProjID =root:ExpDetails:ProjID			SVAR BrReg =root:ExpDetails:BrReg			SVAR Orient =root:ExpDetails:Orient			SVAR PipSoln =root:ExpDetails:PipSoln			SVAR Dye1 =root:ExpDetails:Dye1			SVAR Dye2 =root:ExpDetails:Dye2			SVAR CellNum =root:ExpDetails:CellNum			SVAR RecConfig =root:ExpDetails:RecConfig			SVAR ICVC = root:ExpDetails:ICVC			SVAR Xdrug1 =root:ExpDetails:Xdrug1			SVAR Xdrug2 =root:ExpDetails:Xdrug2			SVAR Xdrug3 =root:ExpDetails:Xdrug3			SVAR AmpPreset = root:ExpDetails:AmpPreset				SVAR nbText = root:ExpDetails:noteBookSelection		// Code for retrieval of note data from the notebook window			DoWindow CORD_ELNPanel			if(V_flag==1)				Notebook CORD_ELNPanel#Notes getData=1				nbText = S_value				SVAR noteBookSelection = root:ExpDetails:noteBookSelection				Notebook CORD_ELNPanel#Notes selection={startOfFile, endOfFile}				Notebook CORD_ELNPanel#Notes setData=""			else				print "There is no detected CORD_ELNPanel and so the notes will not be saved."				nbText = ""						endif		// Retrieve details of the active protocol here			SVAR activeProt = root:DAQ:General:gactiveprot			SVAR curr_sweep = root:DAQ:General:curr_sweep			SVAR gactivesweeps = root:DAQ:General:gactivesweeps			SVAR gactivechanIn = root:DAQ:General:gactivechanIn			SVAR gactivechanOut = root:DAQ:General:gactivechanOut			SVAR activeFile = root:DAQ:General:gactivefile			SVAR baseName = root:DAQ:General:baseName			SVAR gdlmark = root:DAQ:General:gdlmark			if(stringmatch(activeProt, "none"))				NVAR sampleRate = root:DAQ:General:SampleRate			else				string sampRate = "root:DAQ:Protocols:"+activeProt+":samplerate"				NVAR sampleRate = $sampRate			endif		// And transfer those details of the current protocol to the ELN values			if(SVAR_Exists(activeProt))				string/G root:ExpDetails:activePlot = activeFile				string/G root:ExpDetails:Protocol = activeProt				string/G root:ExpDetails:NumTrace = gactivesweeps				string/G root:ExpDetails:SampleRate = num2str(sampleRate)				string/G root:ExpDetails:ADstr = gactivechanIn				string/G root:ExpDetails:DAstr = gactivechanOut			else				string/G root:ExpDetails:activePlot = "none"				string/G root:ExpDetails:Protocol = "none"				string/G root:ExpDetails:NumTrace = "1"				string/G root:ExpDetails:SampleRate = "30"				string/G root:ExpDetails:ADstr = "0"				string/G root:ExpDetails:DAstr = "0"			endif						string/G root:ExpDetails:TheTime = time()			string/G root:ExpDetails:TheDate =  date()			string/G root:ExpDetails:TheDateCont = CORD_ParseDate(Secs2Date(DateTime,-1))		// Get amp related details			NVAR telLogic = root:DAQ:Classes:Amplifiers:telLogic			if(telLogic)				WAVE/T AmpSettings = root:ExpDetails:AmpSettings				NVAR tmpScale = root:DAQ:Classes:Amplifiers:Channel_A_scaling				SVAR tmpMode = root:DAQ:Classes:Amplifiers:Channel_A_mode				WAVE A_gains = root:DAQ:Classes:Amplifiers:Channel_A_gains				NVAR tmpLPF = root:DAQ:Classes:Amplifiers:Channel_A_lpf				NVAR tmpCm = root:DAQ:Classes:Amplifiers:Channel_A_Cm				NVAR tmpRs = root:DAQ:Classes:Amplifiers:Channel_A_Rs				AmpSettings[0][0] = "A" // Set the channel numbers					AmpSettings[0][1] = tmpMode				AmpSettings[0][2] = num2str(tmpScale)				AmpSettings[0][3] = num2str(tmpLPF) // F low cutoff				// Not supported by default				AmpSettings[0][4] = num2str(6) //  F high cutoff				AmpSettings[0][5] = "NS" // Pipette capacitance				AmpSettings[0][6] = num2str(tmpRs) // Not supported by default				AmpSettings[0][7] = num2str(tmpCm) // Not supported by default				AmpSettings[0][8] = "NS" // Not supported by default				AmpSettings[0][9] = num2str(telLogic) //No telegraphing by default				NVAR tmpScale = root:DAQ:Classes:Amplifiers:Channel_B_scaling				SVAR tmpMode = root:DAQ:Classes:Amplifiers:Channel_B_mode				WAVE A_gains = root:DAQ:Classes:Amplifiers:Channel_B_gains				NVAR tmpLPF = root:DAQ:Classes:Amplifiers:Channel_B_lpf				NVAR tmpCm = root:DAQ:Classes:Amplifiers:Channel_B_Cm				NVAR tmpRs = root:DAQ:Classes:Amplifiers:Channel_B_Rs				AmpSettings[1][0] = "B" // Set the channel numbers					AmpSettings[1][1] = tmpMode				AmpSettings[1][2] = num2str(tmpScale)				AmpSettings[1][3] = num2str(tmpLPF) // F low cutoff				// Not supported by default				AmpSettings[1][4] = num2str(6) //  F high cutoff				AmpSettings[1][5] = "NS" // Pipette capacitance				AmpSettings[1][6] = num2str(tmpRs) // Not supported by default				AmpSettings[1][7] = num2str(tmpCm) // Not supported by default				AmpSettings[1][8] = "NS" // Not supported by default				AmpSettings[1][9] = num2str(telLogic) //No telegraphing by default			else				Make/O/T/N=(16,10) AmpSettings				AmpSettings[0,][0] = num2str(p+1) // Set the channel numbers					AmpSettings[0,1][1] = "V-Clamp" // Default mode is 0 (IC)				AmpSettings[2,][1] = "PassThru" // Default mode for everything except the Multiclamp Channels				AmpSettings[0,][2] = num2str(1) // Set the default gain of 1				AmpSettings[0,][3] = "DC" // F low cutoff				AmpSettings[0,][4] = num2str(6) //  F high cutoff				AmpSettings[0,][5] = "NS" // Not supported by default				AmpSettings[0,][6] = "NS" // Not supported by default				AmpSettings[0,][7] = "NS" // Not supported by default				AmpSettings[0,][8] = "NS" // Not supported by default				AmpSettings[0,][9] = num2str(0) //No telegraphing by default			endif			Make/O/T/N=9 columnTitles = {"CH","M","G","Fl","Fh","Cp","Rs","Cm","%","TEL"}		// Final step is to create the large text wave that holds all of the data about the recording			print "Notes:     "+nbText			Make/T/O root:ExpDetails:ELNvalues = {date(),time(),num2str(Age),num2str(VirusDSI),num2str(CaBuff),num2str(Dye1Conc),num2str(Dye2Conc),activeFile,MouseID ,Geno,Sex,VirusID,ProjID,BrReg,Orient,PipSoln,Dye1,Dye2,CellNum,RecConfig,ICVC,Xdrug1,Xdrug2,Xdrug3,AmpPreset,activeFile,activeProt,gactivesweeps,num2str(sampleRate),gactivechanIn,gactivechanOut,nbText}			Make/T/O root:ExpDetails:ELNlabels = {"TheDate","TheTime","Age","VirusDSI","CaBuff","Dye1Conc","Dye2Conc","activeFile","MouseID ","Geno","Sex","VirusID","ProjID","BrReg","Orient","PipSoln","Dye1","Dye2","CellNum","RecConfig","ICVC","Xdrug1","Xdrug2","Xdrug3","AmpPreset","activePlot","Protocol","NumTrace","SampleRate","ADstr","DAstr","noteBookSelection"}			break								case 2: // Load eln data from local waves in the current directory (CALLED BY ANALYSIS)				WAVE/T ELNvalues = ELNvalues						if(!WaveExists(ELNvalues)) // Need more error checking here				print "No ELN data was found. Update to the current ELN system using the provided utility function"			else				DoWindow CORD_ELNPanel				if(V_flag!=1)					CORD_DisplayELN()				endif				Duplicate/O ELNvalues, root:ExpDetails:ELNvalues								WAVE/T ELNlabels = ELNlabels				Duplicate/O ELNlabels, root:ExpDetails:ELNlabels								WAVE/T AmpSettings = AmpSettings				Duplicate/O AmpSettings, root:ExpDetails:AmpSettings								variable UpdateElements = numpnts(ELNvalues), index=0				string ExecStr=""							for(index=0;index<UpdateElements;index+=1)					if(index>=2 && index<=6)						ExecStr = "variable/G root:ExpDetails:"+ELNlabels[index]+" = "+ELNvalues[index]+""						else						ExecStr = "string/G root:ExpDetails:"+ELNlabels[index]+" = \""+ELNvalues[index]+"\""					endif					Execute ExecStr				endfor											Notebook CORD_ELNPanel#Notes selection={startOfFile, endOfFile}				Notebook CORD_ELNPanel#Notes setData=""				Notebook CORD_ELNPanel#Notes setData=ELNvalues[UpdateElements-1]							// Stuff for the PORTER				PathInfo DataBasePath				if(V_flag==0)					CORD_CreatePaths()					//NewPath/O DataBasePath					//PathInfo DataBasePath				endif				SVAR DBPath = root:ExpDetails:DataBasePath				DBPath = S_path				SVAR ProposedFile = root:ExpDetails:ProposedFile				SVAR CurrDF = root:ExpDetails:activePlot				ProposedFile = ELNvalues[7] +"_" + ELNvalues[8]			endif			break	endswitch		ControlUpdate /A/W=CORD_ELNPanel			SetDataFolder thisDFEnd//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_DisplayELN()//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////String thisDF = GetDataFolder(1)// Make sure all of the objects necessary for ELN data storage are present	if(DataFolderExists("root:ExpDetails"))		CORD_UpdateELNdata(1)		string/G root:ExpDetails:PVstr = "0000"		PathInfo DataBasePath		string/G root:ExpDetails:DataBasePath = S_path		string/G root:ExpDetails:ProposedFile = "none"		string/G root:ExpDetails:UserTagA = "none"		string/G root:ExpDetails:UserTagB = "none"		string/G root:ExpDetails:UserTagC = "none"		string/G root:ExpDetails:UserTagD = "none"		string/G root:ExpDetails:button_names = "EXPORT [--->];IMPORT [<---]"		string/G root:ExpDetails:fileList = IndexedFile(DataBasePath,-1,".h5")					string/G root:ExpDetails:foldList = IndexedDir(DataBasePath,-1,0)					variable/G root:ExpDetails:RangeHi = 1		variable/G root:ExpDetails:RangeLo = 0		variable/G root:ExpDetails:currImExMode = 0	else		CORD_UpdateELNdata(0)	endif// Create the panel	DoWindow/F CORD_ELNPanel	if (V_Flag!=0)		DoWindow/K CORD_ELNPanel	endif	Execute "CORD_ELNPanel()"	Execute "ModifyPanel cbRGB = (20000,20000,20000)"	SetDataFolder thisDF	End/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// BEGIN THE WINDOW DESCRIPTION HERE/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Window CORD_ELNPanel() : Panel	PauseUpdate; Silent 1 										// building the window...		variable dispX = str2num(StringFromList(3, StringByKey("SCREEN1", IgorInfo(0)),","))	variable dispY = str2num(StringFromList(4, StringByKey("SCREEN1", IgorInfo(0)),","))	variable GroupE1top = 700-265	variable GroupE1left = 15	variable GroupNotesTop = 420	variable GroupAmpTop = 310	variable GroupRecordingTop = 100	variable GroupPrepTop = 5	NewPanel/W=(195,0,575,700)/K=1 as "Experiment Details"//-------------------PREPARATION DETAILSGroupBox MouseInfo,pos={6,GroupPrepTop},size={370,90},font="Verdana",title="Preparation Info ",font="Verdana",fColor=(60000,20000,40000),fstyle=0,fsize=11,labelBack=(60000,20000,40000)	SetVariable Age,font="Verdana",size={55,20},value=root:ExpDetails:Age,pos={10,GroupPrepTop+22},title="AGE:",frame=1,limits={1,365,0},fsize=10	SetVariable MouseID,font="Verdana",size={70,20},value=root:ExpDetails:MouseID,pos={140,GroupPrepTop+22},title="ID:",frame=1,limits={0,999999,1},fsize=10	PopupMenu Geno,bodyWidth=95,font="Verdana", proc=CORD_XMLPops,pos={320,GroupPrepTop+20},title="Genotype:",value="D2-GFP;wtFVB;wtC57B6;ChR2l18;Thy1-YFP;TH-cre;D1-cre;Other",fsize=10	PopupMenu Sex,bodyWidth=40,font="Verdana", proc=CORD_XMLPops,pos={80,GroupPrepTop+20},title="Sx:",value="M;F",fsize=10		SetVariable VirID,font="Verdana",size={160,20},value=root:ExpDetails:VirusID,pos={65,GroupPrepTop+45},title="Virus ID:",frame=1,fsize=10	SetVariable VirDSI,font="Verdana",size={50,20},value=root:ExpDetails:VirusDSI,pos={10,GroupPrepTop+45},title="DSI:",frame=1,limits={1,365,0},fsize=10	PopupMenu ProjID,bodyWidth=115,font="Verdana", proc=CORD_XMLPops,pos={320,GroupPrepTop+43},title="PID:",value="000: Non-ID Project;001: bAP MSN;002: NV-DA;003: MNI-Glu MSN;004: ChR2 Integration;005: MSN firing props",fsize=10	SetVariable ExpDate,font="Verdana",size={170,20},value=root:ExpDetails:TheDateCont,pos={10,GroupPrepTop+68},title="Num. Date:",frame=1,fsize=10	SetVariable ExpDateRef,font="Verdana",size={170,20},value=root:ExpDetails:TheDate,pos={10+180,GroupPrepTop+68},title="Ref Date:",frame=0,fsize=10//-------------------RECORDING DETAILSGroupBox ProjInfo,pos={6,GroupRecordingTop},size={370,173},font="Verdana",title="Recording Info",font="Verdana",fColor=(20000,60000,40000),fstyle=0,fsize=11,labelBack=(20000,60000,40000)	PopupMenu BrReg,bodyWidth=105,font="Verdana", proc=CORD_XMLPops,pos={108,GroupRecordingTop+22},title="BReg:",value="DL Striatum;S1 Cortex;M1 Cortex;Subst. Nigra;Hippocampus;Thalamus",fsize=10	PopupMenu Orient,bodyWidth=90,font="Verdana", proc=CORD_XMLPops,pos={224,GroupRecordingTop+22},title="-->",value="Coronal;Parasagittal;Horizontal;Sagittal;In Vivo",fsize=10	SetVariable CellNum,font="Verdana",size={80,20},value=root:ExpDetails:CellNum,pos={280,GroupRecordingTop+24},title="Cell Index:",frame=1,fsize=10	PopupMenu PipSoln,bodyWidth=105,font="Verdana", proc=CORD_XMLPops,pos={108,GroupRecordingTop+44},title="Pip Sol:",value="KGluc (Lo Cl);KGluc;KMeSulf;CsCl;KCl",fsize=10	PopupMenu Dye1,bodyWidth=105,font="Verdana", proc=CORD_XMLPops,pos={108,GroupRecordingTop+66},title="Dye 1",value="none;A-594C;A-488C;A-488;A-568;Other",fsize=10		PopupMenu Dye2,bodyWidth=105,font="Verdana", proc=CORD_XMLPops,pos={108,GroupRecordingTop+88},title="Dye 2",value="none;Fluo-8;Fluo-4C;Fluo-5F;Fluo-6N;OGB-1;Other",fsize=10	SetVariable CaBuff,font="Verdana",size={70,20},value=root:ExpDetails:CaBuff,pos={165,GroupRecordingTop+46},title="[egta]:",frame=1,limits={0,10,0},fsize=10	SetVariable Dye1C,font="Verdana",size={70,20},value=root:ExpDetails:Dye1Conc,pos={165,GroupRecordingTop+68},title="[1]:",frame=1,limits={10,1000,0},fsize=10	SetVariable Dye2C,font="Verdana",size={70,20},value=root:ExpDetails:Dye2Conc,pos={165,GroupRecordingTop+90},title="[2]:",frame=1,limits={10,1000,0},fsize=10	SetVariable Xdrug1,font="Verdana",size={120,20},value=root:ExpDetails:Xdrug1,pos={240,GroupRecordingTop+46},title="Plus:",frame=1,limits={0,10,0},fsize=10	SetVariable Xdrug2,font="Verdana",size={120,20},value=root:ExpDetails:Xdrug2,pos={240,GroupRecordingTop+68},title="Plus:",frame=1,limits={0,10,0},fsize=10	SetVariable Xdrug3,font="Verdana",size={120,20},value=root:ExpDetails:Xdrug3,pos={240,GroupRecordingTop+90},title="Plus:",frame=1,limits={0,10,0},fsize=10	SetVariable CurrDF,font="Verdana",size={170,20},value=root:ExpDetails:activePlot,pos={10,GroupRecordingTop+110},title="Current DF:",frame=1,fsize=10	SetVariable Protocol,font="Verdana",size={170,20},value=root:ExpDetails:Protocol,pos={190,GroupRecordingTop+110},title="Protocol:",frame=1,fsize=10	SetVariable NumTrace,font="Verdana",size={170,20},value=root:ExpDetails:NumTrace,pos={10,GroupRecordingTop+130},title="Number of Traces:",frame=1,fsize=10,limits={1,Inf,0}	SetVariable Rate,font="Verdana",size={170,20},value=root:ExpDetails:SampleRate,pos={190,GroupRecordingTop+130},title="Sample Rate (kHz):",frame=1,fsize=10	SetVariable AD,font="Verdana",size={170,20},value=root:ExpDetails:ADstr,pos={10,GroupRecordingTop+150},title="AD string:",frame=1,fsize=10	SetVariable DA,font="Verdana",size={170,20},value=root:ExpDetails:DAstr,pos={190,GroupRecordingTop+150},title="DA string:",frame=1,fsize=10	//-------------------AMPLIFIER SETTINGSGroupBox AmpDetails,pos={6,GroupAmpTop-20},size={370,102},font="Verdana",title="Amplifier Settings",font="Verdana",fColor=(20000,60000,40000),fstyle=0,fsize=11,labelBack=(20000,60000,40000)	// put in a button to allow me to initialize the amplifier on command (in case one is not ready when launching the Corduroy DAQ module)	Button InitAmp,pos={135,GroupAmpTop-29},size={60,20}, proc=CORD_InitTelegraph, title="START", font="Verdana", fsize=10	PopupMenu AmpPreset,bodyWidth=142,font="Verdana", proc=CORD_XMLPops,pos={320,GroupAmpTop-28},title=">>>",value="Multiclamp700B;AMSystems3400",fsize=10	ListBox A_TEL, pos={14,GroupAmpTop}, title="G", font="Verdana", frame=2, listWave=root:ExpDetails:AmpSettings, titleWave=root:ExpDetails:columnTitles, size={355,75}//-------------------NOTESGroupBox NotesBox,pos={6,GroupNotesTop-20},size={370,141},font="Verdana",title="Recording and Analysis Notes",font="Verdana",fColor=(20000,60000,40000),fstyle=0,fsize=11,labelBack=(20000,60000,40000)	NewNotebook /F=0 /K=1 /N=Notes /W=(14,GroupNotesTop+2,366,GroupNotesTop+111) /OPTS=3 /HOST=CORD_ELNPanel as "Notes"	Notebook CORD_ELNPanel#Notes, font="Verdana", fsize=10	//------------------ PORTER SECTIONGroupBox ExImPort,pos={6,GroupE1top+110},size={370,140},font="Verdana",title="Ex-Im-Porter",font="Verdana",fColor=(20000,40000,60000),fstyle=0,fsize=11,labelBack=(20000,40000,60000)	Button SwitchModeButton,pos={GroupE1left,GroupE1top+220},size={170,22}, proc=CORD_SwitchMode, title="Switch Mode", font="Verdana", fsize=10	Button ExportImportButton,pos={GroupE1left+180,GroupE1top+220},size={170,22}, proc=CORD_PorterButton, title="EXPORT [--->]", font="Verdana", fsize=10//------------------ EX PORTER SECTION	SetVariable E_DBPath,font="Verdana",size={350,20},value=root:ExpDetails:DataBasePath,pos={GroupE1left,GroupE1top+132},title="Path:",frame=1,fsize=10	SetVariable E_AssocPV,font="Verdana",size={350,20},value=root:ExpDetails:PVstr,pos={GroupE1left,GroupE1top+154},title="PrairieView Folder:",frame=1,fsize=10	SetVariable E_TagA,font="Verdana",size={110,20},value=root:ExpDetails:UserTagA,pos={GroupE1left,GroupE1top+176},title="Tags:",frame=1,fsize=10	SetVariable E_TagB,font="Verdana",size={70,20},value=root:ExpDetails:UserTagB,pos={GroupE1left+120,GroupE1top+176},title=" ",frame=1,fsize=10	SetVariable E_TagC,font="Verdana",size={70,20},value=root:ExpDetails:UserTagC,pos={GroupE1left+200,GroupE1top+176},title=" ",frame=1,fsize=10	SetVariable E_TagD,font="Verdana",size={70,20},value=root:ExpDetails:UserTagD,pos={GroupE1left+280,GroupE1top+176},title=" ",frame=1,fsize=10	SetVariable E_PropPath,font="Verdana",size={350,20},value=root:ExpDetails:ProposedFile,pos={GroupE1left,GroupE1top+198},title="Proposed File:",frame=2,fsize=10//------------------ IM PORTER SECTION	SetVariable I_DBPath,font="Verdana",size={350,20},value=root:ExpDetails:DataBasePath,pos={GroupE1left,GroupE1top+132},title="Path:",frame=1,fsize=10,disable=1	PopupMenu I_Fields,bodyWidth=115,font="Verdana", proc=CORD_XMLPops,pos={112,GroupE1top+154},title="Field:",value="none;",fsize=10,disable=1	SetVariable I_RangeLo,font="Verdana",size={75,20},value=root:ExpDetails:RangeLo,pos={GroupE1left+155,GroupE1top+154},title="Lo",frame=1,fsize=10,disable=1,limits={0,Inf,0}	SetVariable I_RangeHi,font="Verdana",size={75,20},value=root:ExpDetails:RangeHi,pos={GroupE1left+235,GroupE1top+154},title="Hi",frame=1,fsize=10,disable=1,limits={0,Inf,0}	Button I_SearchGo,pos={GroupE1left+320,GroupE1top+152},size={30,20}, proc=CORD_SwitchMode, title="GO!", font="Verdana", fsize=10,disable=1	PopupMenu I_Folders,bodyWidth=245,font="Verdana", proc=CORD_XMLPops,pos={250,GroupE1top+176},title="Folders:",value=root:ExpDetails:foldList,fsize=10,disable=1	PopupMenu I_Records,bodyWidth=245,font="Verdana", proc=CORD_XMLPops,pos={250,GroupE1top+198},title="Files:",value=root:ExpDetails:fileList,fsize=10,disable=1ResumeUpdateEndMacro////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// PANEL CONTROL FUNCTIONS//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_XMLPops(cntrlName,popNum,popStr) : PopupMenuControl//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	String cntrlName	Variable popNum	// which item is currently selected (1-based)	String popStr		// contents of current popup item as string	string ExecuteCall = "string/G root:ExpDetails:"+cntrlName+" = "+"\""+popStr+"\""	Execute ExecuteCallEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_InitTelegraph(cntrlName) : ButtonControl///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	String cntrlName	SVAR AmpPreset = root:ExpDetails:AmpPreset	string ExecStr = "CORD_ReadAmpState(\""+AmpPreset+"\",1)"	Execute ExecStr // this is to prevent an error if DAQ is not installed since this code resides in the ANALYSIS code base	Button InitAmp, title="RESTART"End///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_SwitchMode(cntrlName) : ButtonControl///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	String cntrlName// Set the current mode to new mode	NVAR currImExMode = root:ExpDetails:currImExMode // 0 = export; 1 = import	currImExMode = !currImExMode	string ExpTabControls = ControlNameList("CORD_ELNPanel",";","E_*")	string ImpTabControls = ControlNameList("CORD_ELNPanel",";","I_*")		variable index =0, setDisable=0	string CurrentControl=""	setDisable = currImExMode// Special case		SVAR  button_names = root:ExpDetails:button_names			Button ExportImportButton, title=	StringFromList(setDisable,button_names)// Exporter		variable ControlCount = ItemsInList(ExpTabControls)		for(index=0;index<ControlCount;index+=1)		CurrentControl = StringFromList(index,ExpTabControls)		ControlInfo /W=CORD_ELNPanel $CurrentControl		switch(abs(V_flag))			case 1:				Button $CurrentControl, disable = setDisable				break			case 3:				PopupMenu $CurrentControl, disable = setDisable				break			case 5:				SetVariable $CurrentControl, disable = setDisable				break			case 10:				TitleBox $CurrentControl, disable = setDisable				break			default:					break		endswitch	endfor// Importer	setDisable = !setDisable	ControlCount = ItemsInList(ImpTabControls)	for(index=0;index<ControlCount;index+=1)		CurrentControl = StringFromList(index,ImpTabControls)		ControlInfo /W=CORD_ELNPanel $CurrentControl		switch(abs(V_flag))			case 1:				Button $CurrentControl, disable = setDisable				break			case 3:				PopupMenu $CurrentControl, disable = setDisable				break			case 5:				SetVariable $CurrentControl, disable = setDisable				break			case 10:				TitleBox $CurrentControl, disable = setDisable				break			default:					break		endswitch	endfor	End///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_PorterButton(cntrlName) : ButtonControl///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string cntrlName		NVAR currImExMode = root:ExpDetails:currImExMode // 0 = export; 1 = import		switch(currImExMode)	// numeric switch		case 0:		// execute if case matches expression			CORD_DataExport()			break		// exit from switch		case 1:		// execute if case matches expression			CORD_DataImport()			break	endswitchEnd////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// UTILITY FUNCTIONS///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function/S CORD_ParseDate(datestring) // This function is only tested with a mac with specific parameters, alter to your needs///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string datestring	string moddatestring = StringFromList(0,datestring," (")	string day = StringFromList(0,moddatestring,"/")	string month = StringFromList(1,moddatestring,"/")	string year = StringFromList(2,moddatestring,"/")	string/G newdate = year+month+day	return newdate	End //ParseDate////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// DATA IMPORT AND EXPORT///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_DataExportForOvation()///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Process for exporting to Ovation is to cycle through all data folders with experimental data// Have to create some extra variables that are important for Ovation:// 0. in general need to create a SOURCE [animal, tissue, cell] and EXPERIMENT [project, general notes, date and time] description// 1. each recorded trace is an epoch that must have EXTERNAL DEVICE for STIMULUS [device.name], a RESPONSE [device.name]// 2. each trace needs to fully specify the EPOCH [start, stop, protID, protParams]// 3. specify datatype and parameters for each RESPONSE [x and y units]// 4. specify EXTERNALDEVICE [gain, mode, ...] parameters for each epoch	// preliminaries	string CurrDF = "", dfTarget="", h5target="", EachEpoch="", protName="", protocolRef=""	variable index=0, jndex=0, fileID = 1, groupID = 1,k=0	SVAR baseNameDate = root:ExpDetails:TheDateCont	string fileNameStr = "CORD_"+baseNameDate+".h5"	HDF5CreateFile /O/P=DataBasePath fileID  as fileNameStr	SetDataFolder root:ExpDetails	HDF5CreateGroup fileID , "/ExperimentDetails", groupID	HDF5SaveGroup /IGOR=-1 /L=1 /T :, fileID, "ExperimentDetails"	// some variables needed for later...	SVAR AmpPreset 		= root:ExpDetails:AmpPreset	WAVE/T columnTitles 	= root:ExpDetails:columnTitles	// List all DFs	CORD_ListDataFolders_Util()	SVAR ListOfDF = root:Analysis:UtilityPanel:FileList		for(index=0;index<ItemsInList(ListOfDF);index+=1)		CurrDF = StringFromList(index, ListOfDF)		if(stringmatch(CurrDF,"f*"))			dfTarget = "root:"+CurrDF			SetDataFolder $dfTarget			h5target = "/data"						// Array to hold protocol parameters			WAVE/T ELNvalues = ELNvalues			string/G dateCont =  ELNvalues[0]			protName = ELNvalues[26]			protocolRef = "root:DAQ:Protocols:"+protName+":interlude"			NVAR interlude = $protocolRef			variable/G interL = interlude			protocolRef = "root:DAQ:Protocols:"+protName+":sweeplength"			NVAR sweeplength = $protocolRef			variable/G sweepL = sweeplength			Make/O/N=2 ProtParamValues			Make/T/O/N=2 ProtParamLabels			ProtParamValues[0] = interL			ProtParamValues[1] = sweepL			ProtParamLabels[0] = "Interlude (s)"			ProtParamLabels[1] = "Sweeplength (ms)"			// Store the device name and properties of the device scaling for this epoch group						WAVE/T amp 	= AmpSettings			WAVE/T titles 	= root:ExpDetails:columnTitles			Duplicate/O amp, $"DeviceSetVals"			Duplicate/O titles, $"DeviceSetLabels"			string/G DeviceA = AmpPreset+"_ch1"			string/G DeviceB = AmpPreset+"_ch2"			string/G DeviceC = "A-M Stim Output"			string/G DeviceD = ""						// convert the starting time string into a timestamp format			Make/T/O/N=(7) startTimeStamp			string/G strTimeStamp = ELNvalues[1]			startTimeStamp[0] = dateCont[13,16]			startTimeStamp[1] = CORD_ConvertMonth(dateCont[5,7])			startTimeStamp[2] = dateCont[9,10]			if(stringmatch(ELNvalues[1], "*PM*" ))				startTimeStamp[3] = num2str(str2num(StringFromList(0, ELNvalues[1]  , ":"))+12)			else				startTimeStamp[3] = StringFromList(0, ELNvalues[1]  , ":")						endif			startTimeStamp[4] = StringFromList(1, ELNvalues[1]  , ":")			startTimeStamp[5] = StringFromList(0,StringFromList(2, ELNvalues[1]  , ":")," ")			startTimeStamp[6] = "America/New_York"			print startTimeStamp			// create a wave for the scaling of the traces			Make/T/O/N=(16,2) units // first row is x, second row is y			units[0,16][0] = "sec"			for(k=0;k<16;k+=1)				if(stringmatch(amp[k][9],"1")) // i.e. if telegraphing is on it must be a multiclamp					if(stringmatch(amp[k][1],"V-Clamp"))						units[k][1] = "nA"					elseif(stringmatch(amp[k][1],"I-Clamp"))						units[k][1] = "mV"					else						units[k][1] = "V"										endif				else					units[k][1] = "V"				endif			endfor			// Saving the complete folder of data to a section of the hdf5 file...			HDF5CreateGroup fileID , h5target, groupID			HDF5SaveGroup /IGOR=-1 /L=7 /T :, fileID, h5target		endif		endfor	// save each protocol folder	variable kndex=0	string thisDF="", newDF=""	SVAR listOfProts = root:DAQ:ProtocolPanel:ProtocolList	for(kndex=0;kndex<ItemsInList(listOfProts);kndex+=1)		thisDF = StringFromList(kndex, listOfProts)		if(!stringmatch(thisDF,"None"))			newDF = "root:DAQ:Protocols:"+thisDF+":"			SetDataFolder $newDF			h5target = "/Protocols"			// create a units scaling wave			SVAR DASeq = DASeq			Make/T/O/N=(strlen(DASeq),2) units 			units[][0] = "sec"			SVAR type = protstate						strswitch(type)	// string switch				case "IC":		// execute if case matches expression					units[][1] = "pA"					break						// exit from switch				case "VC":		// execute if case matches expression					units[][1] = "mV"					break				default:							// optional default expression executed					units[][1] = "V"			endswitch 						HDF5CreateGroup fileID , h5target, groupID			HDF5SaveGroup /IGOR=6 /L=7 /T :, fileID, h5target		endif							endfor	HDF5CloseFile fileID		PathInfo dataBasePath	print " "	print "----------------------------------------------------"	print "Stored a complete copy of this experiment as:     "+fileNameStr	print "File was saved in the directory:                           "+S_path	print "----------------------------------------------------"	print " "End///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_DataExport()///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	String thisDF = GetDataFolder(1)// Some niceness for programming	string fileNameStr=""	variable/G root:ExpDetails:fileID = 1	variable/G root:ExpDetails:groupID = 1	NVAR fileID = root:ExpDetails:fileID	NVAR groupID = root:ExpDetails:groupID	// Update the ELN with any newly entered notes...	WAVE/T ELNvalues = ELNvalues	variable ELNlength = numpnts(ELNvalues)	Notebook CORD_ELNPanel#Notes getData=1	if(strlen(S_value)>0)		ELNvalues[ELNlength-1] = S_value	endif// Export any user-supplied tags	SVAR UserTagA = root:ExpDetails:UserTagA	SVAR UserTagB = root:ExpDetails:UserTagB	SVAR UserTagC = root:ExpDetails:UserTagC	SVAR UserTagD = root:ExpDetails:UserTagD	SVAR PVstr = root:ExpDetails:PVstr	Make/T/O/N=5 ELNtags	ELNtags[0] = UserTagA	ELNtags[1] = UserTagB	ELNtags[2] = UserTagC	ELNtags[3] = UserTagD	ELNtags[4] = PVstr// Check the database path	PathInfo DataBasePath	if(V_flag==0)		Abort "There should never be a case with no database path. if this happens you should run: CORD_CreatePaths()"	endif// Create the filename and the path	SVAR fileRef = root:ExpDetails:ProposedFile	fileNameStr = fileRef+".h5"	//// Finally save the list of raw data waves	HDF5CreateFile /O/P=DataBasePath fileID  as fileNameStr	HDF5CreateGroup fileID , "/rawData", groupID	HDF5SaveGroup /IGOR=6 /L=1 /T :, fileID, "rawData"	HDF5CloseFile fileID	print "Wrote data in current data folder to file: "+fileNameStr// Restore DF	SetDataFolder thisDFEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function CORD_DataImport()///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Import currently works with the exception that the string for the filename should be retrieved from the pulldown menu	ControlInfo I_Records  	string fileName = S_Value  	variable fileID	HDF5OpenFile /P=DataBasePath /R fileID  as fileName	HDF5LoadGroup /CONT=0  /IGOR=-1 /O /R  : , fileID , "rawData" 	HDF5CloseFile fileIDEnd///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function/S CORD_ConvertMonth(monthAsStr)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	string monthAsStr		string monthAsNumber = "1"		strswitch(monthAsStr)	// string switch		case "Jan":			monthAsNumber = "0"+num2str(1);			break		case "Feb":			monthAsNumber = "0"+num2str(2);			break		case "Mar":			monthAsNumber = "0"+num2str(3);			break		case "Apr":			monthAsNumber = "0"+num2str(4);			break		case "May":			monthAsNumber = "0"+num2str(5);			break		case "Jun":			monthAsNumber = "0"+num2str(6);			break		case "Jul":			monthAsNumber = "0"+num2str(7);			break		case "Aug":			monthAsNumber = "0"+num2str(8);			break		case "Sep":			monthAsNumber = "0"+num2str(9);			break		case "Oct":			monthAsNumber = num2str(10);			break		case "Nov":			monthAsNumber = num2str(11);			break		case "Dec":			monthAsNumber = num2str(12);			break	endswitch	return monthAsNumberEnd